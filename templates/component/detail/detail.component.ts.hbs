import { Component, EventEmitter, Input, OnInit, Output, ViewChild, TemplateRef } from '@angular/core';
import { UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';
import { NzMessageService } from 'ng-zorro-antd/message';
import { NzModalService } from 'ng-zorro-antd/modal';
import { GlobalService } from 'src/app/services';
import { {{pascalCase componentName}}Service } from '../{{componentName}}.service';
import { FormCustomValidators } from '@/app/utils/formValidator';
import dayjs from 'dayjs';


@Component({
    selector: '{{selectorPrefix}}-{{componentName}}-detail',
    templateUrl: ['./{{componentName}}-detail.component.ts'],
    styleUrls: ['./{{componentName}}-detail.component.less']
})
export class {{pascalCase componentName}}DetailComponent implements OnInit, AfterViewInit, OnDestroy {
  @Input() data;
  @Input() type;
  @Input() companyList = [];
  @Output() successInfo = new EventEmitter<string>();
  validateForm: UntypedFormGroup;
  formLayout = {
      itemSpan: 8,
      labelSpan: 9,
      controlSpan: 15
  }
  areas = [];
  basicInfoTitleStyle = {};

  btnLoading = false;
  propertyBasicInfo: any;

  constructor(
      private fb: UntypedFormBuilder,
      private globalService: GlobalService,
      private message: NzMessageService,
      private service: PropertyTaxSourcesService,
  ) {

      this.initForm();


  }
  ngOnInit() {
      if (this.type !== 'add') {
          this.getPropertyTaxInfo();
          this.validateForm.controls.estateCode.disable();

      }

      if (this.type === 'add') {

      }
  }

  initForm() {
      const controlsConfig = {
          companyId: [null, [Validators.required]],
          estateCode: [null, [Validators.required, Validators.maxLength(100)]],
          estateName: [null, [Validators.maxLength(100)]],
          estatePropertyArea: [null, [Validators.required, FormCustomValidators.number]],
          estatePropertyNumber: [null, [Validators.required, Validators.maxLength(100)]],
          acquisitionTime: [null, [Validators.required]],
      };
      this.validateForm = this.fb.group(controlsConfig);
  }
  // 房产信息
  getPropertyTaxInfo() {
      this.service.getPropertyTaxInfo(this.data.id).then((res: any) => {
          this.propertyBasicInfo = res;
          const formData = res
          this.validateForm.reset(formData);
      });
  }
  companyChange(value) {

  }
  dateChange(value: Date) {
      const date = dayjs(value).endOf('month').toDate();
      if (dayjs(value).diff(date)) {
          this.validateForm.controls.acquisitionTime.setValue(date);
      }
  }
  validate() {
      for (const key in this.validateForm.controls) {
          if (this.validateForm.controls.hasOwnProperty(key)) {
              this.validateForm.controls[key].markAsDirty();
              this.validateForm.controls[key].updateValueAndValidity();
          }
      }
      return this.validateForm.valid;
  }
  submit() {
      if (!this.validate()) {
          return;
      }
      console.log(this.validateForm.getRawValue());
      const values: any = this.validateForm.getRawValue(); // 获取包含disabled的所有表单值
      const params: any = {
          ...values,
          acquisitionTime: dayjs(values.acquisitionTime).format('YYYY-MM-DD'),
          userId: this.globalService.userData.userId,
          tenantId: this.globalService.userData.tenantId
      };
      this.btnLoading = true;
      if (this.type === 'add') {
          this.service.addPropertyTaxInfo(params).then(res => {
              this.message.success('新增成功！');
              this.successInfo.emit('successAdd');
          }).finally(() => {
              this.btnLoading = false;
          });
      } else {
          params.id = this.data.id;
          this.service.updatePropertyTaxInfo(params).then(res => {
              this.message.success('修改成功！');
              this.successInfo.emit('success');
          }).finally(() => {
              this.btnLoading = false;
          })
      }
  }
  cancel() {
      this.successInfo.emit('cancel');
  }
  trimValue(event, name) {
      const _target = event.target;
      const value = _target.value.trim();
      this.validateForm.get(name).setValue(value);
  }
  isEmpty(data: any): boolean {
      return data === '' || data === undefined || data === null;
  }
}
